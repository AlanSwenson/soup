{"version":3,"sources":["components/Add.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Add","useState","title","setTitle","link","setLink","ingredients","setIngredients","onSubmit","e","preventDefault","console","log","data","fetch","method","body","JSON","stringify","headers","then","label","labelFor","inline","id","placeholder","onChange","target","value","values","onKeyDown","key","intent","text","type","Nav","fixedToTop","className","Group","align","Alignment","RIGHT","Heading","Divider","to","icon","React","Component","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2RAsFeA,MAnFR,WAAgB,IAAD,EAEQC,mBAAS,IAFjB,mBAEXC,EAFW,KAEJC,EAFI,OAGMF,mBAAS,IAHf,mBAGXG,EAHW,KAGLC,EAHK,OAIoBJ,mBAAS,IAJ7B,mBAIXK,EAJW,KAIEC,EAJF,KA+BlB,OACI,6BACI,0CACA,0BAAMC,SA7BO,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAIV,GACZS,QAAQC,IAAIR,GACZO,QAAQC,IAAIN,GACZ,IAAMO,EAAO,CACT,MAASX,EACT,KAAQE,EACR,YAAeE,GAEnBQ,MAAM,OAAQ,CACVC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAP,GACJN,EAAe,IACfF,EAAQ,IACRF,EAAS,SAaL,kBAAC,IAAD,CACIkB,MAAM,QAENC,SAAS,QACTC,OAAO,QAEP,kBAAC,IAAD,CAAYC,GAAG,QACXC,YAAY,eACZC,SAAU,SAAAjB,GAAC,OAAIN,EAASM,EAAEkB,OAAOC,QACjCA,MAAO1B,KAIf,kBAAC,IAAD,CACImB,MAAM,OACNC,SAAS,OACTC,OAAO,QAEP,kBAAC,IAAD,CAAYC,GAAG,OACXC,YAAY,cACZC,SAAU,SAAAjB,GAAC,OAAIJ,EAAQI,EAAEkB,OAAOC,QAChCA,MAAOxB,KAIf,kBAAC,IAAD,CACIiB,MAAM,cACNC,SAAS,cACTC,OAAO,QAGP,kBAAC,IAAD,CACIG,SAAU,SAACG,GAAD,OAAsBtB,EAAesB,IAC/CC,UAAW,SAACrB,GAAkB,UAAVA,EAAEsB,KAAmBtB,EAAEC,kBAC3CmB,OAAQvB,EACRkB,GAAG,cACHC,YAAY,iBAIpB,kBAAC,IAAD,CAAQO,OAAO,UAAUC,KAAK,MAAMC,KAAK,c,wCCzD1CC,E,uKAfP,OACI,kBAAC,IAAD,CAAQC,WAAW,OAAOC,UAAU,YAChC,kBAAC,IAAOC,MAAR,CAAcC,MAAOC,IAAUC,OAC3B,kBAAC,IAAOC,QAAR,gBACA,kBAAC,IAAOC,QAAR,MACA,kBAAC,IAAD,CAAMC,GAAG,WAAU,kBAAC,IAAD,CAAQP,UAAU,cAAcQ,KAAK,SAASZ,KAAK,WACtE,kBAAC,IAAD,CAAQI,UAAU,cAAcQ,KAAK,OAAOZ,KAAK,eACjD,kBAAC,IAAD,CAAMW,GAAG,QAAO,kBAAC,IAAD,CAAQP,UAAU,cAAcQ,KAAK,OAAOZ,KAAK,e,GATnEa,IAAMC,WC6BTC,MApBf,WAGC,OAEC,yBAAKX,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC,IAAD,KACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOY,KAAK,IAAIC,OAAK,IACrB,kBAAC,IAAD,CAAOD,KAAK,OAAOE,UAAWnD,SCZhBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.1e2fe767.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, InputGroup, FormGroup, TagInput } from \"@blueprintjs/core\";\n\nexport function Add() {\n\n    const [title, setTitle] = useState(\"\");\n    const [link, setLink] = useState(\"\");\n    const [ingredients, setIngredients] = useState([]);\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(title);\n        console.log(link);\n        console.log(ingredients);\n        const data = {\n            \"title\": title,\n            \"link\": link,\n            \"ingredients\": ingredients\n        }\n        fetch('/api', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: { 'Content-Type': 'application/json' },\n        }).then(data => {\n            setIngredients([]);\n            setLink(\"\");\n            setTitle(\"\");\n        }\n        );\n    }\n\n\n\n\n\n    return (\n        <div>\n            <h1>Add Recipe</h1>\n            <form onSubmit={handleSubmit}>\n                <FormGroup\n                    label=\"Title\"\n\n                    labelFor=\"title\"\n                    inline=\"true\"\n                >\n                    <InputGroup id=\"title\"\n                        placeholder=\"Recipe Title\"\n                        onChange={e => setTitle(e.target.value)}\n                        value={title}\n                    />\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Link\"\n                    labelFor=\"link\"\n                    inline=\"true\"\n                >\n                    <InputGroup id=\"link\"\n                        placeholder=\"Recipe Link\"\n                        onChange={e => setLink(e.target.value)}\n                        value={link}\n                    />\n                </FormGroup>\n\n                <FormGroup\n                    label=\"Ingredients\"\n                    labelFor=\"ingredients\"\n                    inline=\"true\"\n                >\n\n                    <TagInput\n                        onChange={(values: string[]) => setIngredients(values)}\n                        onKeyDown={(e) => { e.key === 'Enter' && e.preventDefault(); }}\n                        values={ingredients}\n                        id=\"ingredients\"\n                        placeholder='Ingredients'\n                    />\n                </FormGroup>\n\n                <Button intent=\"success\" text=\"Add\" type=\"submit\" />\n\n            </form>\n        </div>\n    );\n\n}\n\nexport default Add;","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Navbar, Alignment } from \"@blueprintjs/core\";\n\nclass Nav extends React.Component {\n    render() {\n        return (\n            <Navbar fixedToTop=\"true\" className=\"bp3-dark\">\n                <Navbar.Group align={Alignment.RIGHT}>\n                    <Navbar.Heading>Recipes</Navbar.Heading>\n                    <Navbar.Divider />\n                    <Link to=\"/search\"><Button className=\"bp3-minimal\" icon=\"search\" text=\"Seach\" /></Link>\n                    <Button className=\"bp3-minimal\" icon=\"book\" text=\"Collection\" />\n                    <Link to=\"/add\"><Button className=\"bp3-minimal\" icon=\"plus\" text=\"Add\" /></Link>\n                </Navbar.Group>\n            </Navbar>\n        );\n\n    }\n}\n\nexport default Nav;\n\n\n","import React, { useState } from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink\n} from \"react-router-dom\";\nimport './App.css';\nimport '../node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '../node_modules/@blueprintjs/core/lib/css/blueprint.css';\nimport Add from './components/Add.js';\nimport Nav from './components/Nav.js';\n\nfunction App() {\n\n\n\treturn (\n\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Router>\n\t\t\t\t\t<Nav />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact />\n\t\t\t\t\t\t<Route path=\"/add\" component={Add} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}