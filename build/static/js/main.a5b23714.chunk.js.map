{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","flaskMessage","setFlaskMessage","title","setTitle","link","setLink","ingredients","setIngredients","useEffect","fetch","then","res","json","data","flask_message","className","fixedToTop","Group","align","Alignment","RIGHT","Heading","Divider","icon","text","onSubmit","e","preventDefault","console","log","method","body","JSON","stringify","headers","label","labelFor","inline","id","placeholder","onChange","target","value","values","onKeyDown","key","intent","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4LA0GeA,MApGf,WAAgB,IAAD,EACyBC,mBAAS,kBADlC,mBACRC,EADQ,KACMC,EADN,OAEWF,mBAAS,IAFpB,mBAERG,EAFQ,KAEDC,EAFC,OAGSJ,mBAAS,IAHlB,mBAGRK,EAHQ,KAGFC,EAHE,OAIuBN,mBAAS,IAJhC,mBAIRO,EAJQ,KAIKC,EAJL,KAkCb,OAPCC,qBAAU,WACTC,MAAM,YAAYC,MAChB,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,MAAK,SAAAG,GACrBZ,EAAgBY,EAAKC,uBAExB,IAID,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACxB,kBAAC,IAAD,CAAQC,WAAW,OAAOD,UAAU,YAChC,kBAAC,IAAOE,MAAR,CAAcC,MAAOC,IAAUC,OAC3B,kBAAC,IAAOC,QAAR,gBACA,kBAAC,IAAOC,QAAR,MACA,kBAAC,IAAD,CAAQP,UAAU,cAAcQ,KAAK,SAASC,KAAK,UACnD,kBAAC,IAAD,CAAQT,UAAU,cAAcQ,KAAK,OAAOC,KAAK,UAM9C,4BAAKxB,GACf,0BAAMyB,SA7Ce,SAACC,GACrBA,EAAEC,iBACHC,QAAQC,IAAK3B,GACb0B,QAAQC,IAAKzB,GACbwB,QAAQC,IAAKvB,GACZ,IAAMO,EAAO,CACZ,MAASX,EACT,KAAQE,EACR,YAAeE,GAEhBG,MAAM,OAAQ,CACbqB,OAAQ,OACRC,KAAMC,KAAKC,UAAUpB,GACrBqB,QAAS,CAAC,eAAgB,sBACxBxB,MAAM,SAAAG,GAEPN,EAAe,IACfF,EAAQ,IACRF,EAAS,SA4BV,kBAAC,IAAD,CACAgC,MAAM,QAENC,SAAS,QACTC,OAAO,QAEN,kBAAC,IAAD,CAAYC,GAAG,QACfC,YAAY,eACdC,SAAU,SAAAd,GAAC,OAAIvB,EAASuB,EAAEe,OAAOC,QAC/BA,MAAQxC,KAIZ,kBAAC,IAAD,CACIiC,MAAM,OACNC,SAAS,OACVC,OAAO,QAEN,kBAAC,IAAD,CAAYC,GAAG,OACfC,YAAY,cACdC,SAAU,SAAAd,GAAC,OAAIrB,EAAQqB,EAAEe,OAAOC,QAC9BA,MAAQtC,KAIT,kBAAC,IAAD,CACA+B,MAAM,cACNC,SAAS,cACTC,OAAO,QAGP,kBAAC,IAAD,CACCG,SAAW,SAACG,GAAD,OAAsBpC,EAAgBoC,IAClDC,UAAW,SAAClB,GAAkB,UAAVA,EAAEmB,KAAmBnB,EAAEC,kBAC3CgB,OAAQrC,EACRgC,GAAG,cACDC,YAAY,iBAId,kBAAC,IAAD,CAAQO,OAAO,UAAUtB,KAAK,MAAMuB,KAAK,eCrFxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.a5b23714.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, InputGroup, FormGroup, TagInput, Navbar, Alignment } from \"@blueprintjs/core\";\nimport './App.css';\nimport '../node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '../node_modules/@blueprintjs/core/lib/css/blueprint.css';\n\nfunction App() {\nconst [flaskMessage, setFlaskMessage] = useState(\"no message set\");\nconst [title, setTitle] = useState(\"\");\nconst [link, setLink] = useState(\"\");\nconst [ingredients, setIngredients] = useState([]);\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\tconsole.log( title);\n\tconsole.log( link);\n\tconsole.log( ingredients );\n\t\tconst data = {\n\t\t\t\"title\": title,\n\t\t\t\"link\": link,\n\t\t\t\"ingredients\": ingredients\n\t\t}\n\t\tfetch('/api', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(data),\n\t\t\theaders: {'Content-Type': 'application/json' },\n\t\t}).then( data =>\n\t\t\t{\n\t\t\t\tsetIngredients([]);\n\t\t\t\tsetLink(\"\");\n\t\t\t\tsetTitle(\"\");\n\t\t\t}\n\t\t)\n\t}\n\t  useEffect(() => {\n    fetch('/message').then(\n      res => res.json().then(data => {\n        setFlaskMessage(data.flask_message);\n      }))\n  }, []);\n\n  return (\n\t  \n    <div className=\"App\">\n      <header className=\"App-header\">\n<Navbar fixedToTop=\"true\" className=\"bp3-dark\">\n    <Navbar.Group align={Alignment.RIGHT}>\n        <Navbar.Heading>Recipes</Navbar.Heading>\n        <Navbar.Divider />\n        <Button className=\"bp3-minimal\" icon=\"search\" text=\"Seach\" />\n        <Button className=\"bp3-minimal\" icon=\"plus\" text=\"Add\" />\n    </Navbar.Group>\n</Navbar>\n\n\n\n        \t  <h1>{flaskMessage}</h1>\n\t<form onSubmit={handleSubmit}>\n\t  <FormGroup\n\t  label=\"Title\"\n\n\t  labelFor=\"title\"\n\t  inline=\"true\"\n>\n    <InputGroup id=\"title\" \n\t  \tplaceholder=\"Recipe Title\"\n\t\tonChange={e => setTitle(e.target.value )}\n\t  \tvalue={ title }\n\t  />\n\t  </FormGroup>\n\n<FormGroup\n    label=\"Link\"\n    labelFor=\"link\"\n\t  inline=\"true\"\n>\n    <InputGroup id=\"link\" \n\t  \tplaceholder=\"Recipe Link\" \n\t\tonChange={e => setLink(e.target.value )}\n\t  \tvalue={ link }\n\t  />\n\t  </FormGroup>\n\n\t  <FormGroup\n\t  label=\"Ingredients\"\t  \n\t  labelFor=\"ingredients\"\n\t  inline=\"true\"\n\t  >\n\n\t  <TagInput\n    onChange={ (values: string[]) => setIngredients( values )}\n\t  onKeyDown={(e) => { e.key === 'Enter' && e.preventDefault(); }}\n\t  values={ingredients}\n\t  id=\"ingredients\"\n    \tplaceholder='Ingredients'\n/>\n</FormGroup>\n\n\t  <Button intent=\"success\" text=\"Add\" type=\"submit\"/>\n      \n</form>\n\n\t  </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}